generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id  String @id @default(uuid())
  email String @unique
  phone String? @unique
  passwordHash String @db.VarChar(255) //null if SSO-only
  createdAt DateTime @default(now())
  updatedAt DateTime 


// Profile  and preferences
profile Profile?
preferences Preference?

// auth sessions and providers
sessions Session[]
accounts AuthAccount[]

// core App relations
consultations Consultation[]
goals UserGoal[]
availabilities AvailabilityWindow[]
workoutPlans WorkoutPlan[]
workoutsLogged WorkoutLog[]
metrics Metrics[]
aiMessages AiMessage[]
notifications Notification[]
groceryList GroceryList[]
macroTargets MacroTarget[]
messagesReceived Message[]
messagesSent Message[]

//  // social - This is post-MVP -> swipe left/swipe right -> Accept -> Follow eachother during workout plan, etc.
//   connectionsFrom  UserConnection[] @relation("UserConnectionsFrom")
//   connectionsTo    UserConnection[] @relation("UserConnectionsTo")
//   swipesMade       Swipe[]          @relation("UserSwipesFrom")
//   swipesReceived   Swipe[]          @relation("UserSwipesTo")
//   messagesReceived Message[]        @relation("UserMessagesTo")
//   messagesSent     Message[]        @relation("UserMessagesFrom")
}

model AuthAccount {
    id                 String @id @default(uuid())
  userId             String
  provider           String
  providerAccountId  String
  accessToken        String?
  refreshToken       String?
  expiresAt          DateTime?

  user               User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  jwtId        String   @unique
  userAgent    String?
  ip           String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

enum Sex { male female other prefer_not_to_say }
enum ExperienceLevel { beginner novice intermediate advanced elite }
enum UnitSystem { metric imperial }
enum GoalType { weight_loss muscle_gain fitness }

model Profile {
    userId            String @id @default(uuid())
    firstname         String
    lastname          String
    sex               Sex?
    heightCm          int?  // store cm; convert in app to lbs (optional)
    weightKg          Decimal? @db.Decimal(6,2)
    experienceLevel   ExperienceLevel?
      healthNotes       String?  // freeform; sensitive -> encryption
    goalType       GoalType
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    conditions        UserHealthCondition[]
}

model Preference {
    userId String @id @default(uuid())
    timezone String default('America/New_York')
    unitSystem UnitSystem default(UnitSystem.metric)
    voiceEnabled Boolean default(true)
    ttsvoice String? // voice, id, name
    language String default('en')
    notifPush Boolean default(true)
    notifEmail Boolean default(false)
    notifSms Boolean default(false)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model AvailabilityWindow {
    id String @id @default(uuid())
    userId String
    // Weekly recurring windows from consultation (work schedule + free time)
  dayOfWeek Int      // 0=Sun ... 6=Sat
  startMin  Int      // minutes from 00:00 (e.g., 540 = 09:00)
  endMin    Int
  priority  Int      @default(0) // to rank preferred times

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, dayOfWeek])
}
