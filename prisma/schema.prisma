generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id  String @id @default(uuid())
  email String @unique
  phone String? @unique
  passwordHash String @db.VarChar(255) //null if SSO-only
  createdAt DateTime @default(now())
  updatedAt DateTime 


// Profile  and preferences
profile Profile?
preferences Preference?

// auth sessions and providers
sessions Session[]
accounts AuthAccount[]

// core App relations
consultations Consultation[]
goals UserGoal[]
availabilities AvailabilityWindow[]
workoutPlans WorkoutPlan[]
workoutsLogged WorkoutLog[]
metrics Metrics[]
aiMessages AiMessage[]
notifications Notification[]
groceryList GroceryList[]
macroTargets MacroTarget[]
messagesReceived Message[]
messagesSent Message[]

//  // social - This is post-MVP -> swipe left/swipe right -> Accept -> Follow eachother during workout plan, etc.
//   connectionsFrom  UserConnection[] @relation("UserConnectionsFrom")
//   connectionsTo    UserConnection[] @relation("UserConnectionsTo")
//   swipesMade       Swipe[]          @relation("UserSwipesFrom")
//   swipesReceived   Swipe[]          @relation("UserSwipesTo")
//   messagesReceived Message[]        @relation("UserMessagesTo")
//   messagesSent     Message[]        @relation("UserMessagesFrom")
}


// AuthAccount
model AuthAccount {
    id                 String @id @default(uuid())
  userId             String
  provider           String
  providerAccountId  String
  accessToken        String?
  refreshToken       String?
  expiresAt          DateTime?

  user               User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}


// Session
model Session {
  id           String   @id @default(uuid())
  userId       String
  jwtId        String   @unique
  userAgent    String?
  ip           String?
  expiresAt    DateTime
  createdAt    DateTime @default(now())

  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

// Profile Preference   
enum Sex { male female other prefer_not_to_say }
enum ExperienceLevel { beginner novice intermediate advanced elite }
enum UnitSystem { metric imperial }
enum GoalType { weight_loss muscle_gain fitness }

model Profile {
    userId            String @id @default(uuid())
    firstname         String
    lastname          String
    sex               Sex?
    heightCm          int?  // store cm; convert in app to lbs (optional)
    weightKg          Decimal? @db.Decimal(6,2)
    experienceLevel   ExperienceLevel?
    healthNotes       String?  // freeform; sensitive -> encryption
    goalType        GoalType?
    unitSystem        UnitSystem?
    createdAt       DateTime @default(now())
    updatedAt       DateTime @updatedAt

    user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    conditions        UserHealthCondition[]
}


// Preferences
model Preference {
    userId String @id @default(uuid())
    timezone String default('America/New_York')
    unitSystem UnitSystem? default(UnitSystem.metric)
    voiceEnabled Boolean default(true)
    ttsvoice String? // voice, id, name
    language String default('en')
    notifPush Boolean default(true)
    notifEmail Boolean default(false)
    notifSms Boolean default(false)
    created_at DateTime @default(now())
    updated_at DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}


// Availability windows
model AvailabilityWindow {
    id String @id @default(uuid())
    userId String
    // Weekly recurring windows from consultation (work schedule + free time)
  dayOfWeek Int      // 0=Sun ... 6=Sat
  startMin  Int      // minutes from 00:00 (e.g., 540 = 09:00)
  endMin    Int
  priority  Int      @default(0) // to rank preferred times

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, dayOfWeek])
}


// Health conditions
model HealthCondition {
    id String @id @default(uuid())
    userId String
    code String @unique // e.g., "LOW_BACK_PAIN"
    name String
    description String?
    isContraindication Boolean @default(false)
    createdAt DateTime @default(now())

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserHealthCondition {
    id             String @id @default(uuid())
    userId           String
    healthConditionId String
    notes            String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)
    condition HealthCondition @relation(fields: [healthConditionId], references: [id], onDelete: Cascade)

    @@unique([userId, healthConditionId])
    @@index([userId])
}

enum ConsultationStatus { pending completed }

model ConsultationSession {
  id            String             @id @default(uuid())
  userId        String
  status        ConsultationStatus @default(pending)
  startedAt     DateTime           @default(now())
  completedAt   DateTime?

  // Raw Q/A snapshot for auditâ€”denormalize for speed; also store structured items below
  responsesJson Json?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  answers  ConsultationAnswer[]

  @@index([userId, status])
}

model ConsultationQuestion {
  id          String @id @default(uuid())
  code        String @unique // e.g., "GOAL_PRIMARY", "WORK_SCHEDULE"
  prompt      String
  helpText    String?
  type        String // "single","multi","scale","time_range","number","text","enum"
  optionsJson Json?  // for enums/scales
  isActive    Boolean @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model ConsultationAnswer {
  id            String @id @default(uuid())
  sessionId     String
  questionId    String
  valueJson     Json   // normalized in app; flexible for time ranges etc.

  session       Session @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  question      ConsultationQuestion @relation(fields: [questionId], references: [id], onDelete: Restrict)

  @@unique([sessionId, questionId])
  @@index([sessionId])
}

model AiMessage {
  id          String   @id @default(uuid())
  userId      String
  role        String   // "user" | "assistant" | "system"
  content     String   // text transcript
  meta        Json?    // tokens, model id, latency, etc.
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}

model AiRecommendation {
  id          String   @id @default(uuid())
  userId      String
  context     String?  // e.g., "plan_adjustment","exercise_substitution"
  rationale   String?
  payloadJson Json     // diff or full recommendation object
  createdAt   DateTime @default(now())

  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, createdAt])
}